#!/usr/bin/env bash

function safeExit() {
  exit 0
}

############## Default values ###################
scriptName="git code.fix"
scriptArgs="<path>"
verbose=false
veryVerbose=false
fixPermissions=true
version=1.0.0
ecsImage=ghcr.io/justcoded/php-code-analysis:${version}
#ecsImage=docker.io/library/dockerize-php-code-analysis-php-code-analysis-tool
args=()

############## Main Script Here ###################

function handle() {
  greeting

  uid=$(id -u)
  gid=$(id -g)

  currDir=$(pwd)
  currGitRoot=$(git rev-parse --show-toplevel)
  rootDir=$currGitRoot

  if $verbose; then
    echo "Current git root: $currGitRoot"
  fi

  while [ "$(git rev-parse --show-toplevel 2>/dev/null)" ]; do
    rootDir=$(git rev-parse --show-toplevel)

    cd ../
  done

  cd "$currDir"

  relativePath=".${currDir/#$rootDir/}"

  if $verbose; then
    echo "Root dir: $rootDir"
    echo "Current dir: $currDir"
    echo "Relative path: $relativePath"
  fi

  if [ ! -z "${args[0]}" ]; then
    for arg in "${args[@]}"; do
      if [ -z "$path" ]; then
        path="$relativePath/${arg}"
        path="${path#"./"}"
      else
        subPath="$relativePath/${arg}"
        subPath="${subPath#"./"}"
        path="$path $subPath"
      fi
    done
  else
    path="${relativePath#"./"}"
  fi

  mapfile -t modifiedBeforePaths < <(git diff --name-only | grep '\.php$')

  # Run code fix
  (cd $rootDir && runEcs)

  fixPermissions

  mapfile -t modifiedAfterPaths < <(git diff --name-only | grep '\.php$')

  if $veryVerbose; then
    echo ''
    echo "Modified before files:"
    printf '  %s\n' "${modifiedBeforePaths[@]}"
    echo ''
    echo "Modified after files:"
    printf '  %s\n' "${modifiedAfterPaths[@]}"
    echo ""
  fi

  modifiedPaths=()

  # Find files removed before the change
  for file in "${modifiedBeforePaths[@]}"; do
      if [[ ! " ${modifiedAfterPaths[@]} " =~ " $file " ]]; then
          modifiedPaths+=("$file")
      fi
  done

  # Add files changed after the change
  for file in "${modifiedAfterPaths[@]}"; do
      modifiedPaths+=("$file")
  done

  if $veryVerbose; then
    echo "Modified files:"
    printf '  %s\n' "${modifiedPaths[@]}"
    echo ""
  fi
}

############## Begin Options and Usage ###################

# Print usage
usage() {
  echo -n "${scriptName} [OPTIONS] ${scriptArgs}

Fix code in current/specified directory

 Options:
  -v, --verbose           Display debug info
  -V, --very-verbose      Display more debug info
  -P, --no-permission-fix Do no run permission fix
  -h, --help              Display this help and exit
"
}

runEcs() {
  if [[ "$path" == '.' && -d "$rootDir/src" ]]; then
    path='src'
  fi

  dockerTty=''
  if [ -t 0 ] ; then
    dockerTty='-t'
  fi;

  dockerCmd="docker run -i $dockerTty --rm"

  if [ "$path" != '.' ]; then
    if [ -f "$rootDir/ecs.php" ]; then
      cmd="$dockerCmd -v \"$rootDir\":/codebase -v \"$rootDir/ecs.php\":/app/ecs.php $ecsImage bash -c \"/root/.composer/vendor/bin/ecs check --fix --config /app/ecs.php $path\""
    else
      cmd="$dockerCmd -v \"$rootDir\":/codebase $ecsImage bash -c \"/root/.composer/vendor/bin/ecs check --fix --config /app/ecs.php $path\""
    fi
  else
    if [ -f "$rootDir/ecs.php" ]; then
      cmd="$dockerCmd -v \"$rootDir\":/codebase -v \"$rootDir/ecs.php\":/app/ecs.php $ecsImage bash -c \"/root/.composer/vendor/bin/ecs check --fix --config /app/ecs.php\""
    else
      cmd="$dockerCmd -v \"$rootDir\":/codebase $ecsImage bash -c \"/root/.composer/vendor/bin/ecs check --fix --config /app/ecs.php\""
    fi
  fi

  if $verbose; then
    echo ''
    echo "Path: $path"
    echo ''
    echo "$cmd"
    echo ''
  fi

  eval $cmd
}

fixPermissions() {
  if ! $fixPermissions; then
    return 0
  fi

  chownPaths=()

  if [[ -d "$rootDir/src" ]]; then
    chownPaths+=("$rootDir/src")
  fi

  if [[ -d "$rootDir/boilerplate/src" ]]; then
    chownPaths+=("$rootDir/boilerplate/src")
  fi

  if [[ -d "$rootDir/modules" ]]; then
    chownPaths+=("$rootDir/modules")
  fi

  if [[ -d "$rootDir/private" ]]; then
    chownPaths+=("$rootDir/private")
  fi

  if [[ -z "$chownPaths" ]]; then
    chownPaths+=("$rootDir")
  fi

  # Run sudo chown for each path in the array
  for chownPath in "${chownPaths[@]}"; do
      if $veryVerbose; then
        echo "$chownPathArray sudo chown -R $uid:$gid "$chownPath""
      fi

      sudo chown -R $uid:$gid "$chownPath"
  done
}

greeting() {
  BRed='\033[1;31m'
  NC='\033[0m' # No Color
  echo -e "${BRed}JustCoded PHP Code Analysis Tool v${version}${NC}"
  echo ''
}

die() {
  echo "$@" 1>&2
  exit 1
}

# Iterate over options breaking -ab into -a -b when needed and --foo=bar into
# --foo bar
optstring=h
unset options
while (($#)); do
  case $1 in
  # If option is of type -ab
  -[!-]?*)
    # Loop over each character starting with the second
    for ((i = 1; i < ${#1}; i++)); do
      c=${1:i:1}

      # Add current char to options
      options+=("-$c")

      # If option takes a required argument, and it's not the last char make
      # the rest of the string its argument
      if [[ $optstring = *"$c:"* && ${1:i+1} ]]; then
        options+=("${1:i+1}")
        break
      fi
    done
    ;;

  # If option is of type --foo=bar
  --?*=*) options+=("${1%%=*}" "${1#*=}") ;;
  # add --endopts for --
  --) options+=(--endopts) ;;
  # Otherwise, nothing special
  *) options+=("$1") ;;
  esac
  shift
done
set -- "${options[@]}"
unset options

# Print help if no arguments were passed.
# Uncomment to force arguments when invoking the script
# [[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
  -h | --help)
    usage >&2
    safeExit
    ;;
  -v | --verbose) verbose=true ;;
  -V | --very-verbose) verbose=true veryVerbose=true ;;
  -P | --no-permission-fix) fixPermissions=false;;
  --endopts)
    shift
    break
    ;;
  *) die "invalid option: '$1'." ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

############## End Options and Usage ###################

############## Script Run Code ###################

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Run your script
handle

# Exit cleanly
safeExit

#!/usr/bin/env bash

function safeExit() {
  exit 0
}

############## Default values ###################
scriptName="git whp.run"
verbose=false
version=0.1.0
ecsImage=ghcr.io/justcoded/http-request-proxy:${version}
#ecsImage=docker.io/library/http-proxy-client-whp
args=()

############## Main Script Here ###################

function handle() {
  greeting

  dockerTty=''
  if [ -t 0 ] ; then
    dockerTty='-t'
  fi;

  cmd="docker run --network host -i $dockerTty --rm $ecsImage"

  if [ $channel ]; then
      cmd="${cmd} --channel=${channel}"
  fi

  if [ $forward_url ]; then
      cmd="${cmd} --forward-url=${forward_url}"
  fi

  if $verbose; then
      echo "Running: $cmd"
  fi

  eval $cmd
}

greeting() {
  BRed='\033[1;31m'
  NC='\033[0m' # No Color
  echo -e "${BRed}JustCoded Http Request Proxy Tool ${version}${NC}"
  echo ''
}

die() {
  echo "$@" 1>&2
  exit 1
}

############## Begin Options and Usage ###################

# Print usage
usage() {
  echo -n "${scriptName} [OPTIONS] --channel=<channel> --forward-url=<forward_url>

This is a script template.  Edit this description to print help to users.

 Options:
  -h, --help            Display this help and exit
  -c, --channel         Channel UUID or webhook channel URL
  -u, --forward-url     The URL to forward the request to
  -v, --verbose         Run in verbose mode
"
}

# Iterate over options breaking -ab into -a -b when needed and --foo=bar into
# --foo bar
optstring=h
unset options
while (($#)); do
  case $1 in
    # If option is of type -ab
    -[!-]?*)
      # Loop over each character starting with the second
      for ((i=1; i < ${#1}; i++)); do
        c=${1:i:1}

        # Add current char to options
        options+=("-$c")

        # If option takes a required argument, and it's not the last char make
        # the rest of the string its argument
        if [[ $optstring = *"$c:"* && ${1:i+1} ]]; then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;

    # If option is of type --foo=bar
    --?*=*) options+=("${1%%=*}" "${1#*=}") ;;
    # add --endopts for --
    --) options+=(--endopts) ;;
    # Otherwise, nothing special
    *) options+=("$1") ;;
  esac
  shift
done
set -- "${options[@]}"
unset options

# Print help if no arguments were passed.
# Uncomment to force arguments when invoking the script
# [[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safeExit ;;
    -c|--channel) shift; export channel="$1" ;;
    -u|--forward-url) shift; export forward_url="$1" ;;
    -v | --verbose) verbose=true ;;
    --endopts) shift; break ;;
    *) die "invalid option: '$1'." ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

############## End Options and Usage ###################


############## Script Run Code ###################

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Run your script
handle

# Exit cleanly
safeExit
